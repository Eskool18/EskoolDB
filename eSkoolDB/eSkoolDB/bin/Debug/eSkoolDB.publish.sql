/*
Deployment script for eSkoolDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "eSkoolDB"
:setvar DefaultFilePrefix "eSkoolDB"
:setvar DefaultDataPath "C:\Users\Hp\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Hp\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Starting rebuilding table [dbo].[User_Info]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_User_Info] (
    [UserId]   INT          IDENTITY (1, 1) NOT NULL,
    [userName] VARCHAR (50) NOT NULL,
    [password] VARCHAR (50) NOT NULL,
    [role]     VARCHAR (50) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_User_Info1] PRIMARY KEY CLUSTERED ([UserId] ASC, [userName] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[User_Info])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_User_Info] ON;
        INSERT INTO [dbo].[tmp_ms_xx_User_Info] ([UserId], [userName], [password], [role])
        SELECT   [UserId],
                 [userName],
                 [password],
                 [role]
        FROM     [dbo].[User_Info]
        ORDER BY [UserId] ASC, [userName] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_User_Info] OFF;
    END

DROP TABLE [dbo].[User_Info];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_User_Info]', N'User_Info';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_User_Info1]', N'PK_User_Info', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [dbo].[ClassTeachers]...';


GO
CREATE TABLE [dbo].[ClassTeachers] (
    [ClassGrade] INT          NOT NULL,
    [ClassName]  VARCHAR (50) NOT NULL,
    [TeacherID]  VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_ClassTeachers] PRIMARY KEY CLUSTERED ([ClassGrade] ASC, [ClassName] ASC, [TeacherID] ASC)
);


GO
PRINT N'Creating Table [dbo].[QuestionBank]...';


GO
CREATE TABLE [dbo].[QuestionBank] (
    [QuestionID]        INT          IDENTITY (1, 1) NOT NULL,
    [uniqueSyllabusID]  INT          NOT NULL,
    [questionTypeId]    INT          NULL,
    [QuestionCategory]  VARCHAR (50) NULL,
    [QuestionNature]    VARCHAR (50) NULL,
    [QuestionStatement] VARCHAR (50) NULL,
    CONSTRAINT [PK_QuestionBank] PRIMARY KEY CLUSTERED ([QuestionID] ASC)
);


GO
PRINT N'Creating Table [dbo].[QuestionBankMcqs]...';


GO
CREATE TABLE [dbo].[QuestionBankMcqs] (
    [QuestionID]    INT          NOT NULL,
    [Option1]       VARCHAR (50) NULL,
    [Option2]       VARCHAR (50) NULL,
    [Option3]       VARCHAR (50) NULL,
    [Option4]       VARCHAR (50) NULL,
    [CorrectOption] VARCHAR (50) NULL,
    CONSTRAINT [PK_QuestionBankMcqs] PRIMARY KEY CLUSTERED ([QuestionID] ASC)
);


GO
PRINT N'Creating Table [dbo].[SchoolClasses]...';


GO
CREATE TABLE [dbo].[SchoolClasses] (
    [ClassGrade] INT          NOT NULL,
    [ClassName]  VARCHAR (50) NOT NULL,
    [Incharge]   VARCHAR (50) NULL,
    CONSTRAINT [PK_SchoolClasses] PRIMARY KEY CLUSTERED ([ClassGrade] ASC, [ClassName] ASC)
);


GO
PRINT N'Creating Table [dbo].[Student]...';


GO
CREATE TABLE [dbo].[Student] (
    [userName]       VARCHAR (50) NOT NULL,
    [StudentName]    VARCHAR (50) NULL,
    [FatherName]     VARCHAR (50) NULL,
    [ClassGrade]     INT          NULL,
    [ClassName]      VARCHAR (50) NULL,
    [RollNumber]     VARCHAR (50) NULL,
    [StudentCNIC]    VARCHAR (50) NULL,
    [ContactNumber1] VARCHAR (50) NULL,
    [ContactNumber2] VARCHAR (50) NULL,
    [StudentAge]     INT          NULL,
    [AdmissionDate]  DATE         NULL,
    CONSTRAINT [PK_Student_Info] PRIMARY KEY CLUSTERED ([userName] ASC)
);


GO
PRINT N'Creating Table [dbo].[Teacher]...';


GO
CREATE TABLE [dbo].[Teacher] (
    [TeacherID]   VARCHAR (50) NOT NULL,
    [Designation] VARCHAR (50) NULL,
    [Salary]      INT          NULL,
    [Education]   VARCHAR (50) NULL,
    [Gender]      VARCHAR (10) NULL,
    [TeacherName] VARCHAR (50) NULL,
    [TeacherCNIC] VARCHAR (50) NULL,
    [Experience]  VARCHAR (50) NULL,
    CONSTRAINT [PK_Teacher] PRIMARY KEY CLUSTERED ([TeacherID] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ClassTeachers_SchoolClasses]...';


GO
ALTER TABLE [dbo].[ClassTeachers] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassTeachers_SchoolClasses] FOREIGN KEY ([ClassGrade], [ClassName]) REFERENCES [dbo].[SchoolClasses] ([ClassGrade], [ClassName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ClassTeachers_Teacher]...';


GO
ALTER TABLE [dbo].[ClassTeachers] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassTeachers_Teacher] FOREIGN KEY ([TeacherID]) REFERENCES [dbo].[Teacher] ([TeacherID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Student_SchoolClasses]...';


GO
ALTER TABLE [dbo].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_SchoolClasses] FOREIGN KEY ([ClassGrade], [ClassName]) REFERENCES [dbo].[SchoolClasses] ([ClassGrade], [ClassName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ClassTeachers] WITH CHECK CHECK CONSTRAINT [FK_ClassTeachers_SchoolClasses];

ALTER TABLE [dbo].[ClassTeachers] WITH CHECK CHECK CONSTRAINT [FK_ClassTeachers_Teacher];

ALTER TABLE [dbo].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_SchoolClasses];


GO
PRINT N'Update complete.';


GO
